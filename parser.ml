type token =
  | LANGUAGE of (string)
  | STRING of (string)
  | INT of (int)
  | CONCAT
  | LENGTH
  | APPENDTOLIST
  | LPAREN
  | RPAREN
  | UNION
  | INTERSECT
  | EMPTYWORD
  | IDENT
  | DELIM
  | EOF
  | EOL
  | CAP
  | KLEENE
  | CONCATABC

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
	open Techno
# 26 "parser.ml"
let yytransl_const = [|
  260 (* CONCAT *);
  261 (* LENGTH *);
  262 (* APPENDTOLIST *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* UNION *);
  266 (* INTERSECT *);
  267 (* EMPTYWORD *);
  268 (* IDENT *);
  269 (* DELIM *);
    0 (* EOF *);
  270 (* EOL *);
  271 (* CAP *);
  272 (* KLEENE *);
  273 (* CONCATABC *);
    0|]

let yytransl_block = [|
  257 (* LANGUAGE *);
  258 (* STRING *);
  259 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\004\000\006\000\006\000\008\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\004\000\005\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\007\000\
\008\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\012\000\000\000\014\000\000\000\
\013\000"

let yydgoto = "\002\000\
\012\000\013\000"

let yysindex = "\255\255\
\019\255\000\000\000\000\000\000\000\000\252\254\254\254\019\255\
\000\255\003\255\010\255\000\000\001\000\019\255\019\255\033\255\
\019\255\019\255\019\255\019\255\019\255\019\255\000\000\019\255\
\040\255\042\255\000\000\049\255\056\255\063\255\018\255\000\000\
\000\000\095\255\000\000\019\255\019\255\019\255\019\255\070\255\
\077\255\079\255\086\255\000\000\000\000\019\255\000\000\093\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\250\255"

let yytablesize = 276
let yytable = "\001\000\
\023\000\016\000\014\000\009\000\015\000\002\000\017\000\025\000\
\026\000\018\000\028\000\029\000\030\000\031\000\032\000\033\000\
\019\000\034\000\000\000\003\000\004\000\005\000\000\000\006\000\
\007\000\008\000\021\000\022\000\000\000\040\000\041\000\042\000\
\043\000\009\000\010\000\011\000\020\000\000\000\000\000\048\000\
\027\000\021\000\022\000\020\000\000\000\020\000\024\000\035\000\
\021\000\022\000\021\000\022\000\020\000\024\000\036\000\024\000\
\000\000\021\000\022\000\020\000\000\000\037\000\024\000\000\000\
\021\000\022\000\020\000\000\000\038\000\024\000\000\000\021\000\
\022\000\020\000\000\000\039\000\024\000\044\000\021\000\022\000\
\020\000\000\000\020\000\024\000\045\000\021\000\022\000\021\000\
\022\000\020\000\024\000\046\000\024\000\047\000\021\000\022\000\
\020\000\000\000\020\000\024\000\049\000\021\000\022\000\021\000\
\022\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\021\000\022\000\009\000\000\000\002\000\024\000\000\000\
\009\000\009\000\002\000\002\000"

let yycheck = "\001\000\
\000\000\008\000\007\001\000\000\007\001\000\000\007\001\014\000\
\015\000\007\001\017\000\018\000\019\000\020\000\021\000\022\000\
\007\001\024\000\255\255\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\009\001\010\001\255\255\036\000\037\000\038\000\
\039\000\015\001\016\001\017\001\004\001\255\255\255\255\046\000\
\008\001\009\001\010\001\004\001\255\255\004\001\014\001\008\001\
\009\001\010\001\009\001\010\001\004\001\014\001\013\001\014\001\
\255\255\009\001\010\001\004\001\255\255\013\001\014\001\255\255\
\009\001\010\001\004\001\255\255\013\001\014\001\255\255\009\001\
\010\001\004\001\255\255\013\001\014\001\008\001\009\001\010\001\
\004\001\255\255\004\001\014\001\008\001\009\001\010\001\009\001\
\010\001\004\001\014\001\013\001\014\001\008\001\009\001\010\001\
\004\001\255\255\004\001\014\001\008\001\009\001\010\001\009\001\
\010\001\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\008\001\255\255\008\001\014\001\255\255\
\013\001\014\001\013\001\014\001"

let yynames_const = "\
  CONCAT\000\
  LENGTH\000\
  APPENDTOLIST\000\
  LPAREN\000\
  RPAREN\000\
  UNION\000\
  INTERSECT\000\
  EMPTYWORD\000\
  IDENT\000\
  DELIM\000\
  EOF\000\
  EOL\000\
  CAP\000\
  KLEENE\000\
  CONCATABC\000\
  "

let yynames_block = "\
  LANGUAGE\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 26 "parser.mly"
                     ( _1 )
# 198 "parser.ml"
               : Techno.tech))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                         ( Eol(_1, _3) )
# 206 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 30 "parser.mly"
                 ( TInt _1 )
# 213 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
                     ( TLang _1 )
# 220 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
                   ( TString _1 )
# 227 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                             ( _2 )
# 234 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                           ( TUnion(_1, _3) )
# 242 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                             ( TIntersection(_1, _3) )
# 250 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                           ( TConcat(_1, _3) )
# 258 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                                  ( TStrLen _3 )
# 265 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                                              ( TAppendToList(_3,_5) )
# 273 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                                        ( TCap(_3, _5) )
# 281 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                                                   ( TKleene(_3, _5, _7) )
# 290 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                                            ( TConcatABC(_3, _5) )
# 298 "parser.ml"
               : 'expr))
(* Entry parser_main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parser_main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Techno.tech)
